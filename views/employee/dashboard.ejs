<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Dashboard - Transfer System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .sidebar {
            min-height: 100vh;
            background: #343a40;
            color: white;
            padding-top: 20px;
        }
        .sidebar a {
            color: white;
            text-decoration: none;
            padding: 10px 15px;
            display: block;
        }
        .sidebar a:hover {
            background: #495057;
        }
        .main-content {
            padding: 20px;
        }
        .profile-card {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .skill-badge {
            font-size: 0.8em;
            margin-right: 5px;
        }
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 0.7em;
        }
        .status-badge {
            font-size: 0.8em;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 sidebar">
                <h4 class="text-center mb-4">Employee Portal</h4>
                <nav>
                    <a href="/employee/dashboard" class="active">
                        <i class="fas fa-home me-2"></i> Dashboard
                    </a>
                    <a href="/auth/logout">
                        <i class="fas fa-sign-out-alt me-2"></i> Logout
                    </a>
                </nav>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 main-content">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Welcome, <%= user.name %></h2>
                    <div class="position-relative">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#notificationsModal">
                            <i class="fas fa-bell me-2"></i>Notifications
                            <% if (unreadNotifications && unreadNotifications.length > 0) { %>
                                <span class="notification-badge"><%= unreadNotifications.length %></span>
                            <% } %>
                        </button>
                    </div>
                </div>

                <% if (messages.success) { %>
                    <div class="alert alert-success"><%= messages.success %></div>
                <% } %>

                <% if (messages.error) { %>
                    <div class="alert alert-danger"><%= messages.error %></div>
                <% } %>

                <div class="row">
                    <!-- Profile Section -->
                    <div class="col-md-4">
                        <div class="profile-card p-4">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h5 class="card-title mb-0">Profile Information</h5>
                                <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </div>
                            <div class="mb-3">
                                <p class="mb-1"><strong>Name:</strong> <%= user.name %></p>
                                <p class="mb-1"><strong>Email:</strong> <%= user.email %></p>
                                <p class="mb-1"><strong>Department:</strong> <%= user.department %></p>
                                <p class="mb-1"><strong>Location:</strong> <%= user.location %></p>
                            </div>
                            <div>
                                <h6 class="mb-2">Skills</h6>
                                <div class="d-flex flex-wrap gap-2">
                                    <% user.skills.forEach(skill => { %>
                                        <span class="badge bg-primary skill-badge">
                                            <%= skill.name %> (<%= skill.level %>)
                                        </span>
                                    <% }); %>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Transfer Request Section -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Transfer Requests</h5>
                                <% if (!activeRequest) { %>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#transferRequestModal">
                                        <i class="fas fa-plus me-1"></i>New Request
                                    </button>
                                <% } %>
                            </div>
                            <div class="card-body">
                                <% if (activeRequest) { %>
                                    <div class="card mb-4">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h5 class="mb-0">Active Transfer Request</h5>
                                            <span class="badge bg-<%= getStatusBadgeColor(activeRequest.status) %>">
                                                <%= activeRequest.status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %>
                                            </span>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <p><strong>Current Department:</strong> <%= activeRequest.currentDepartment %></p>
                                                    <p><strong>Requested Department:</strong> <%= activeRequest.requestedDepartment %></p>
                                                    <p><strong>Requested Role:</strong> <%= activeRequest.requestedRole %></p>
                                                    <p><strong>Reason:</strong> <%= activeRequest.reason %></p>
                                                </div>
                                                <div class="col-md-6">
                                                    <p><strong>Submitted:</strong> <%= new Date(activeRequest.createdAt).toLocaleDateString() %></p>
                                                    <p><strong>Assigned HR:</strong> <%= activeRequest.assignedHR ? activeRequest.assignedHR.name : 'Not assigned' %></p>
                                                </div>
                                            </div>
                                            <% if (activeRequest.status === 'pending') { %>
                                                <div class="mt-3">
                                                    <button type="button" class="btn btn-danger" onclick="deleteTransferRequest('<%= activeRequest._id %>')">
                                                        <i class="fas fa-trash me-1"></i> Delete Request
                                                    </button>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                <% } else { %>
                                    <p class="text-muted mb-0">No active transfer requests</p>
                                <% } %>

                                <% if (transferHistory && transferHistory.length > 0) { %>
                                    <h6 class="mt-4 mb-3">Request History</h6>
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>Department</th>
                                                    <th>Status</th>
                                                    <th>Date</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% transferHistory.forEach(request => { %>
                                                    <tr>
                                                        <td><%= request.requestedDepartment %></td>
                                                        <td>
                                                            <span class="badge bg-<%= getStatusBadgeColor(request.status) %>">
                                                                <%= request.status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %>
                                                            </span>
                                                        </td>
                                                        <td><%= new Date(request.createdAt).toLocaleDateString() %></td>
                                                        <td>
                                                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="viewRequestDetails('<%= request._id %>')">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                <% }); %>
                                            </tbody>
                                        </table>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Profile Modal -->
    <div class="modal fade" id="editProfileModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form action="/employee/profile/update" method="POST">
                    <div class="modal-body">
                        <div class="row">
                            <!-- Basic Information -->
                            <div class="col-md-6">
                                <h6 class="mb-3">Basic Information</h6>
                                <div class="mb-3">
                                    <label for="name" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="name" name="name" value="<%= user.name %>" required>
                                </div>
                                <div class="mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" required>
                                </div>
                            </div>

                            <!-- Skills Management -->
                            <div class="col-md-6">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h6 class="mb-0">Skills</h6>
                                    <button type="button" class="btn btn-sm btn-primary" onclick="showAddSkillForm()">
                                        <i class="fas fa-plus me-1"></i>Add Skill
                                    </button>
                                </div>

                                <!-- Current Skills -->
                                <div id="currentSkills" class="mb-3">
                                    <% user.skills.forEach(skill => { %>
                                        <div class="d-flex align-items-center mb-2">
                                            <span class="badge bg-primary me-2">
                                                <%= skill.name %> (<%= skill.level %>)
                                            </span>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteSkill('<%= skill._id %>')">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    <% }); %>
                                </div>

                                <!-- Add Skill Form (Hidden by default) -->
                                <div id="addSkillForm" class="mb-3" style="display: none;">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="mb-3">
                                                <label for="skillName" class="form-label">Select Skill</label>
                                                <select class="form-select" id="skillName" name="skillName" required>
                                                    <option value="">Choose a skill...</option>
                                                    <!-- Technical Skills -->
                                                    <optgroup label="Technical Skills">
                                                        <option value="JavaScript">JavaScript</option>
                                                        <option value="Python">Python</option>
                                                        <option value="Java">Java</option>
                                                        <option value="C++">C++</option>
                                                        <option value="SQL">SQL</option>
                                                        <option value="HTML/CSS">HTML/CSS</option>
                                                        <option value="React">React</option>
                                                        <option value="Node.js">Node.js</option>
                                                        <option value="AWS">AWS</option>
                                                        <option value="Docker">Docker</option>
                                                        <option value="Git">Git</option>
                                                        <option value="Linux">Linux</option>
                                                    </optgroup>
                                                    <!-- Soft Skills -->
                                                    <optgroup label="Soft Skills">
                                                        <option value="Communication">Communication</option>
                                                        <option value="Leadership">Leadership</option>
                                                        <option value="Problem Solving">Problem Solving</option>
                                                        <option value="Teamwork">Teamwork</option>
                                                        <option value="Time Management">Time Management</option>
                                                        <option value="Adaptability">Adaptability</option>
                                                        <option value="Creativity">Creativity</option>
                                                        <option value="Critical Thinking">Critical Thinking</option>
                                                    </optgroup>
                                                    <!-- Management Skills -->
                                                    <optgroup label="Management Skills">
                                                        <option value="Project Management">Project Management</option>
                                                        <option value="Risk Management">Risk Management</option>
                                                        <option value="Strategic Planning">Strategic Planning</option>
                                                        <option value="Budget Management">Budget Management</option>
                                                        <option value="Team Management">Team Management</option>
                                                    </optgroup>
                                                    <!-- Other Skills -->
                                                    <optgroup label="Other Skills">
                                                        <option value="Data Analysis">Data Analysis</option>
                                                        <option value="Business Analysis">Business Analysis</option>
                                                        <option value="Agile/Scrum">Agile/Scrum</option>
                                                        <option value="Customer Service">Customer Service</option>
                                                        <option value="Public Speaking">Public Speaking</option>
                                                    </optgroup>
                                                </select>
                                            </div>
                                            <div class="mb-3">
                                                <label for="skillLevel" class="form-label">Proficiency Level</label>
                                                <select class="form-select" id="skillLevel" name="skillLevel" required>
                                                    <option value="Beginner">Beginner</option>
                                                    <option value="Intermediate">Intermediate</option>
                                                    <option value="Advanced">Advanced</option>
                                                    <option value="Expert">Expert</option>
                                                </select>
                                            </div>
                                            <div class="d-flex justify-content-end">
                                                <button type="button" class="btn btn-secondary btn-sm me-2" onclick="hideAddSkillForm()">Cancel</button>
                                                <button type="button" class="btn btn-primary btn-sm" onclick="addSkill()">Add Skill</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Transfer Request Modal -->
    <div class="modal fade" id="transferRequestModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">New Transfer Request</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="transferRequestForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="requestedDepartment" class="form-label">Requested Department</label>
                            <select class="form-select" id="requestedDepartment" name="requestedDepartment" required>
                                <option value="">Select Department</option>
                                <option value="IT">IT</option>
                                <option value="Finance">Finance</option>
                                <option value="Marketing">Marketing</option>
                                <option value="Operations">Operations</option>
                                <option value="Human Resources">Human Resources</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="reason" class="form-label">Reason for Transfer</label>
                            <textarea class="form-control" id="reason" name="reason" rows="3" required></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Submit Request</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Request Details Modal -->
    <div class="modal fade" id="requestDetailsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Transfer Request Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="requestDetailsContent">
                    <!-- Content will be loaded dynamically -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notifications Modal -->
    <div class="modal fade" id="notificationsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Notifications</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="notificationsList">
                        <% if (unreadNotifications && unreadNotifications.length > 0) { %>
                            <% unreadNotifications.forEach(notification => { %>
                                <div class="alert alert-info mb-2">
                                    <p class="mb-0"><%= notification.message %></p>
                                    <small class="text-muted"><%= new Date(notification.createdAt).toLocaleString() %></small>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p class="text-muted">No new notifications</p>
                        <% } %>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function viewRequestDetails(requestId) {
            fetch(`/employee/transfer-request/${requestId}`)
                .then(response => response.json())
                .then(request => {
                    const content = document.getElementById('requestDetailsContent');
                    content.innerHTML = `
                        <div class="mb-3">
                            <strong>Requested Department:</strong>
                            <p>${request.requestedDepartment}</p>
                        </div>
                        <div class="mb-3">
                            <strong>Current Department:</strong>
                            <p>${request.currentDepartment}</p>
                        </div>
                        <div class="mb-3">
                            <strong>Status:</strong>
                            <p><span class="badge bg-${getStatusBadgeColor(request.status)}">
                                ${request.status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                            </span></p>
                        </div>
                        <div class="mb-3">
                            <strong>Reason:</strong>
                            <p>${request.reason}</p>
                        </div>
                        <div class="mb-3">
                            <strong>Submitted:</strong>
                            <p>${new Date(request.createdAt).toLocaleString()}</p>
                        </div>
                    `;
                    new bootstrap.Modal(document.getElementById('requestDetailsModal')).show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading request details');
                });
        }

        function getStatusBadgeColor(status) {
            const colors = {
                'pending': 'warning',
                'hr_approved': 'success',
                'hr_rejected': 'danger',
                'hod_approved': 'success',
                'hod_rejected': 'danger'
            };
            return colors[status] || 'secondary';
        }

        function showAddSkillForm() {
            document.getElementById('addSkillForm').style.display = 'block';
        }

        function hideAddSkillForm() {
            document.getElementById('addSkillForm').style.display = 'none';
            // Clear form
            document.getElementById('skillName').value = '';
            document.getElementById('skillLevel').value = 'Intermediate';
        }

        function addSkill() {
            const name = document.getElementById('skillName').value;
            const level = document.getElementById('skillLevel').value;

            if (!name || !level) {
                alert('Please select both skill and proficiency level');
                return;
            }

            // Determine category based on the selected skill
            let category = 'Other';
            const technicalSkills = ['JavaScript', 'Python', 'Java', 'C++', 'SQL', 'HTML/CSS', 'React', 'Node.js', 'AWS', 'Docker', 'Git', 'Linux'];
            const softSkills = ['Communication', 'Leadership', 'Problem Solving', 'Teamwork', 'Time Management', 'Adaptability', 'Creativity', 'Critical Thinking'];
            const managementSkills = ['Project Management', 'Risk Management', 'Strategic Planning', 'Budget Management', 'Team Management'];

            if (technicalSkills.includes(name)) {
                category = 'Technical';
            } else if (softSkills.includes(name)) {
                category = 'Soft Skills';
            } else if (managementSkills.includes(name)) {
                category = 'Management';
            }

            fetch('/employee/profile/skills', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name, category, level })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Add new skill to the list
                    const currentSkills = document.getElementById('currentSkills');
                    const newSkill = document.createElement('div');
                    newSkill.className = 'd-flex align-items-center mb-2';
                    newSkill.innerHTML = `
                        <span class="badge bg-primary me-2">
                            ${name} (${level})
                        </span>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteSkill('${data.skillId}')">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    currentSkills.appendChild(newSkill);
                    
                    // Hide form and clear inputs
                    hideAddSkillForm();
                } else {
                    alert('Error adding skill');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding skill');
            });
        }

        function deleteSkill(skillId) {
            if (confirm('Are you sure you want to delete this skill?')) {
                fetch(`/employee/profile/skills/${skillId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove skill from the list
                        const skillElement = document.querySelector(`[data-skill-id="${skillId}"]`);
                        if (skillElement) {
                            skillElement.remove();
                        }
                    } else {
                        alert('Error deleting skill');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting skill');
                });
            }
        }

        // Handle transfer request form submission
        document.getElementById('transferRequestForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = {
                requestedDepartment: formData.get('requestedDepartment'),
                reason: formData.get('reason')
            };
            
            fetch('/employee/transfer-request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-success';
                    alertDiv.textContent = data.message;
                    document.querySelector('.main-content').insertBefore(alertDiv, document.querySelector('.main-content').firstChild);
                    
                    // Close modal and reload page after a short delay
                    const modal = bootstrap.Modal.getInstance(document.getElementById('transferRequestModal'));
                    modal.hide();
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    // Show error message in the modal
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger';
                    errorDiv.textContent = data.error || 'Error submitting request';
                    this.insertBefore(errorDiv, this.firstChild);
                    
                    // Remove error message after 3 seconds
                    setTimeout(() => errorDiv.remove(), 3000);
                }
            })
            .catch(error => {
                // Show error message in the modal
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger';
                errorDiv.textContent = error.message || 'Error submitting request';
                this.insertBefore(errorDiv, this.firstChild);
                
                // Remove error message after 3 seconds
                setTimeout(() => errorDiv.remove(), 3000);
            });
        });

        async function deleteTransferRequest(requestId) {
            if (!confirm('Are you sure you want to delete this transfer request?')) {
                return;
            }

            try {
                const response = await fetch(`/employee/transfer-request/${requestId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                
                if (response.ok) {
                    alert(data.message);
                    window.location.reload();
                } else {
                    alert(data.error || 'Error deleting request');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting request');
            }
        }
    </script>
</body>
</html> 